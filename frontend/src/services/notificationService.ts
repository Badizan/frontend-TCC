import { api } from './api';

export interface Notification {
    id: string;
    title: string;
    message: string;
    category: 'maintenance' | 'expenses' | 'reminders' | 'system';
    channel: 'IN_APP' | 'EMAIL';
    read: boolean;
    createdAt: string;
    userId: string;
}

export interface NotificationResponse {
    notifications: Notification[];
    total: number;
    unreadCount: number;
    page: number;
    limit: number;
}

class NotificationService {
    private static instance: NotificationService;

    constructor() {
        if (NotificationService.instance) {
            return NotificationService.instance;
        }
        NotificationService.instance = this;
    }

    // Inicializa√ß√£o b√°sica
    initialize() {
        console.log('üì± NotificationService inicializado');
    }

    // Limpeza
    cleanup() {
        console.log('üßπ NotificationService limpo');
    }

    // Inicializa√ß√£o ap√≥s login
    async initializeAfterLogin(): Promise<void> {
        try {
            console.log('üîî Inicializando notifica√ß√µes ap√≥s login');
            // Aqui poderia configurar WebSocket para notifica√ß√µes em tempo real
            await this.setupNotificationPermissions();
        } catch (error) {
            console.error('‚ùå Erro ao inicializar notifica√ß√µes:', error);
        }
    }

    // Configurar permiss√µes de notifica√ß√£o
    async setupNotificationPermissions(): Promise<boolean> {
        try {
            if ('Notification' in window) {
                const permission = await Notification.requestPermission();
                return permission === 'granted';
            }
            return false;
        } catch (error) {
            console.error('‚ùå Erro ao configurar permiss√µes:', error);
            return false;
        }
    }

    // Buscar notifica√ß√µes do backend
    async getNotifications(options?: {
        page?: number;
        limit?: number;
        unreadOnly?: boolean;
        category?: string;
    }): Promise<Notification[] | NotificationResponse> {
        try {
            console.log('üì• Buscando notifica√ß√µes...');

            // Construir query parameters
            const params = new URLSearchParams();
            if (options?.page) params.append('page', options.page.toString());
            if (options?.limit) params.append('limit', options.limit.toString());
            if (options?.unreadOnly) params.append('unreadOnly', 'true');
            if (options?.category) params.append('category', options.category);

            const queryString = params.toString();
            const url = `/notifications${queryString ? `?${queryString}` : ''}`;

            const response = await api.apiInstance.get(url);

            console.log('‚úÖ Notifica√ß√µes carregadas:', response.data);

            // Se a resposta √© um array, √© compatibilidade com vers√£o antiga
            if (Array.isArray(response.data)) {
                return response.data as Notification[];
            }

            // Se a resposta tem estrutura completa
            return response.data as NotificationResponse;
        } catch (error) {
            console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);

            // Retornar array vazio em caso de erro (sem mock)
            return [];
        }
    }

    // Buscar apenas notifica√ß√µes n√£o lidas
    async getUnreadNotifications(): Promise<Notification[]> {
        try {
            const response = await api.apiInstance.get('/notifications/unread');
            return response.data.notifications || response.data;
        } catch (error) {
            console.error('‚ùå Erro ao buscar notifica√ß√µes n√£o lidas:', error);
            return [];
        }
    }

    // Marcar notifica√ß√£o como lida
    async markAsRead(notificationId: string): Promise<void> {
        try {
            console.log('‚úÖ Marcando notifica√ß√£o como lida:', notificationId);
            await api.markNotificationAsRead(notificationId);
        } catch (error) {
            console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error);
            throw error;
        }
    }

    // Marcar todas as notifica√ß√µes como lidas
    async markAllAsRead(): Promise<void> {
        try {
            console.log('‚úÖ Marcando todas notifica√ß√µes como lidas');
            await api.markAllNotificationsAsRead();
        } catch (error) {
            console.error('‚ùå Erro ao marcar todas notifica√ß√µes como lidas:', error);
            throw error;
        }
    }

    // Deletar notifica√ß√£o (se suportado pelo backend)
    async deleteNotification(notificationId: string): Promise<void> {
        try {
            console.log('üóëÔ∏è Deletando notifica√ß√£o:', notificationId);
            await api.apiInstance.delete(`/notifications/${notificationId}`);
        } catch (error) {
            console.error('‚ùå Erro ao deletar notifica√ß√£o:', error);
            throw error;
        }
    }

    // Enviar notifica√ß√£o local (browser)
    sendLocalNotification(title: string, message: string, options?: NotificationOptions) {
        try {
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(title, {
                    body: message,
                    icon: '/favicon.ico',
                    badge: '/favicon.ico',
                    ...options
                });
            }
        } catch (error) {
            console.error('‚ùå Erro ao enviar notifica√ß√£o local:', error);
        }
    }

    // Dados mock para fallback
    private getMockNotifications(): Notification[] {
        return [
            {
                id: 'mock-1',
                title: 'Lembrete de Manuten√ß√£o',
                message: 'Est√° na hora de fazer a revis√£o do seu ve√≠culo.',
                category: 'maintenance',
                channel: 'IN_APP',
                read: false,
                createdAt: new Date().toISOString(),
                userId: 'current-user'
            },
            {
                id: 'mock-2',
                title: 'Despesa Registrada',
                message: 'Nova despesa de combust√≠vel foi adicionada: R$ 120,00.',
                category: 'expenses',
                channel: 'IN_APP',
                read: false,
                createdAt: new Date(Date.now() - 86400000).toISOString(),
                userId: 'current-user'
            },
            {
                id: 'mock-3',
                title: 'Lembrete Vencido',
                message: 'Voc√™ tem um lembrete vencido para trocar o √≥leo do motor.',
                category: 'reminders',
                channel: 'IN_APP',
                read: false,
                createdAt: new Date(Date.now() - 172800000).toISOString(),
                userId: 'current-user'
            },
            {
                id: 'mock-4',
                title: 'Sistema AutoManuten√ß√£o',
                message: 'Bem-vindo ao sistema! Cadastre seus ve√≠culos para come√ßar.',
                category: 'system',
                channel: 'IN_APP',
                read: false,
                createdAt: new Date(Date.now() - 300000).toISOString(),
                userId: 'current-user'
            },
            {
                id: 'mock-5',
                title: 'Pr√≥xima Revis√£o',
                message: 'Sua pr√≥xima revis√£o est√° agendada para a pr√≥xima semana.',
                category: 'maintenance',
                channel: 'IN_APP',
                read: false,
                createdAt: new Date(Date.now() - 7200000).toISOString(),
                userId: 'current-user'
            }
        ];
    }

    // M√©todo para verificar se notifica√ß√µes est√£o habilitadas
    isNotificationEnabled(): boolean {
        return 'Notification' in window && Notification.permission === 'granted';
    }

    // M√©todo para se inscrever em notifica√ß√µes push
    async subscribeToPushNotifications(): Promise<boolean> {
        try {
            if ('Notification' in window) {
                const permission = await Notification.requestPermission();
                return permission === 'granted';
            }
            return false;
        } catch (error) {
            console.error('‚ùå Erro ao ativar notifica√ß√µes push:', error);
            return false;
        }
    }

    // M√©todo para mostrar notifica√ß√£o local
    showLocalNotification(title: string, options?: {
        body?: string;
        icon?: string;
    }) {
        try {
            if (this.isNotificationEnabled()) {
                new Notification(title, {
                    body: options?.body || '',
                    icon: options?.icon || '/favicon.ico'
                });
            }
        } catch (error) {
            console.error('‚ùå Erro ao mostrar notifica√ß√£o local:', error);
        }
    }

    // M√©todo para testar notifica√ß√£o push
    async testPushNotification(): Promise<void> {
        try {
            this.showLocalNotification('Teste de Notifica√ß√£o', {
                body: 'Esta √© uma notifica√ß√£o de teste do sistema AutoManuten√ß√£o!'
            });
        } catch (error) {
            console.error('‚ùå Erro ao testar notifica√ß√£o:', error);
        }
    }

    // Verificar notifica√ß√µes imediatas
    async checkImmediate(): Promise<void> {
        try {
            console.log('üîç Solicitando verifica√ß√£o de notifica√ß√µes imediatas...');
            await api.apiInstance.post('/notifications/check-immediate');
            console.log('‚úÖ Verifica√ß√£o de notifica√ß√µes imediatas solicitada');
        } catch (error) {
            console.error('‚ùå Erro ao verificar notifica√ß√µes imediatas:', error);
            throw error;
        }
    }
}

// Export singleton instance
export const notificationService = new NotificationService();
export default notificationService;
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(uuid())
  name           String
  email          String               @unique
  password       String
  role           UserRole             @default(OWNER)
  phone          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  maintenances   Maintenance[]        @relation("MechanicMaintenances")
  notifications  Notification[]
  passwordResets PasswordResetToken[] @relation("UserPasswordResets")
  settings       UserSettings?
  vehicles       Vehicle[]            @relation("UserVehicles")

  @@map("users")
}

model Vehicle {
  id             String          @id @default(uuid())
  brand          String
  model          String
  year           Int
  licensePlate   String
  type           VehicleType
  ownerId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  color          String?
  mileage        Float?
  expenses       Expense[]
  mileageRecords MileageRecord[]
  reminders      Reminder[]
  maintenances   Maintenance[]   @relation("VehicleMaintenances")
  owner          User            @relation("UserVehicles", fields: [ownerId], references: [id])

  @@map("vehicles")
}

model Maintenance {
  id            String            @id @default(uuid())
  vehicleId     String
  mechanicId    String?
  type          MaintenanceType
  status        MaintenanceStatus @default(SCHEDULED)
  description   String
  scheduledDate DateTime
  completedDate DateTime?
  cost          Float?
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  mechanic      User?             @relation("MechanicMaintenances", fields: [mechanicId], references: [id])
  vehicle       Vehicle           @relation("VehicleMaintenances", fields: [vehicleId], references: [id])

  @@map("maintenances")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

model Reminder {
  id              String       @id @default(uuid())
  vehicleId       String
  description     String
  dueDate         DateTime?
  completed       Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  dueMileage      Float?
  intervalDays    Int?
  intervalMileage Float?
  lastNotified    DateTime?
  recurring       Boolean      @default(false)
  type            ReminderType @default(TIME_BASED)
  vehicle         Vehicle      @relation(fields: [vehicleId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  vehicleId   String
  description String
  category    String
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mileage     Float?
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Notification {
  id           String              @id @default(uuid())
  userId       String
  type         NotificationType
  title        String
  message      String
  channel      NotificationChannel
  read         Boolean             @default(false)
  sent         Boolean             @default(false)
  scheduledFor DateTime?
  sentAt       DateTime?
  data         Json?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  category     String
  user         User                @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model UserSettings {
  id               String @id @default(uuid())
  userId           String @unique
  advancedSettings Json   @default("{\"monthlyExpenseLimit\": null, \"mileageAlertThreshold\": 1000, \"maintenanceReminderDays\": 7}")
  categories       Json   @default("{\"system\": {\"email\": false, \"inApp\": true}, \"expenses\": {\"email\": true, \"inApp\": true}, \"reminders\": {\"email\": true, \"inApp\": true}, \"maintenance\": {\"email\": true, \"inApp\": true}}")
  channels         Json   @default("{\"email\": true, \"inApp\": true}")
  user             User   @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

model MileageRecord {
  id        String   @id @default(uuid())
  vehicleId String
  mileage   Float
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Report {
  id        String   @id @default(uuid())
  userId    String
  type      String
  period    String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prediction {
  id         String   @id @default(uuid())
  vehicleId  String
  type       String
  prediction Json
  confidence Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResets", fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum UserRole {
  ADMIN
  OWNER
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
  VAN
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

enum NotificationType {
  MAINTENANCE_DUE
  REMINDER_DUE
  MILEAGE_ALERT
  EXPENSE_LIMIT
  SYSTEM_UPDATE
  MAINTENANCE_SCHEDULED
  MAINTENANCE_COMPLETED
  REMINDER_CREATED
  REMINDER_COMPLETED
  EXPENSE_CREATED
}

enum NotificationChannel {
  IN_APP
  EMAIL
}

enum ReminderType {
  TIME_BASED
  MILEAGE_BASED
  HYBRID
}

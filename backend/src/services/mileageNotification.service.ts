import { PrismaClient } from '@prisma/client';
import { NotificationService } from './notification.service';

const prisma = new PrismaClient();

export class MileageNotificationService {
    private notificationService: NotificationService;

    constructor() {
        this.notificationService = new NotificationService();
    }

    /**
     * Verifica se h√° lembretes baseados em quilometragem que devem ser disparados
     */
    async checkMileageBasedReminders(vehicleId: string, currentMileage: number): Promise<void> {
        try {
            console.log(`üîç MileageNotificationService: Verificando lembretes para ve√≠culo ${vehicleId} com ${currentMileage}km`);

            // Buscar todos os lembretes baseados em quilometragem para este ve√≠culo
            const mileageReminders = await prisma.reminder.findMany({
                where: {
                    vehicleId,
                    type: 'MILEAGE_BASED',
                    completed: false,
                    dueMileage: {
                        not: null
                    }
                },
                include: {
                    vehicle: {
                        include: {
                            owner: true
                        }
                    }
                }
            });

            console.log(`üìã MileageNotificationService: ${mileageReminders.length} lembretes baseados em quilometragem encontrados`);

            for (const reminder of mileageReminders) {
                if (reminder.dueMileage && currentMileage >= reminder.dueMileage) {
                    await this.triggerMileageReminder(reminder, currentMileage);
                }
            }

            // Verificar lembretes h√≠bridos (tempo + quilometragem)
            const hybridReminders = await prisma.reminder.findMany({
                where: {
                    vehicleId,
                    type: 'HYBRID',
                    completed: false,
                    dueMileage: {
                        not: null
                    }
                },
                include: {
                    vehicle: {
                        include: {
                            owner: true
                        }
                    }
                }
            });

            console.log(`üìã MileageNotificationService: ${hybridReminders.length} lembretes h√≠bridos encontrados`);

            for (const reminder of hybridReminders) {
                if (reminder.dueMileage && currentMileage >= reminder.dueMileage) {
                    await this.triggerMileageReminder(reminder, currentMileage);
                }
            }

        } catch (error) {
            console.error('‚ùå MileageNotificationService: Erro ao verificar lembretes baseados em quilometragem:', error);
        }
    }

    /**
     * Dispara uma notifica√ß√£o para um lembrete baseado em quilometragem
     */
    private async triggerMileageReminder(reminder: any, currentMileage: number): Promise<void> {
        try {
            console.log(`üîî MileageNotificationService: Disparando notifica√ß√£o para lembrete ${reminder.id}`);

            const vehicle = reminder.vehicle;
            const owner = vehicle.owner;

            // Criar notifica√ß√£o
            await this.notificationService.createNotification({
                userId: owner.id,
                type: 'MILEAGE_ALERT',
                title: 'Manuten√ß√£o por Quilometragem',
                message: `O ve√≠culo ${vehicle.brand} ${vehicle.model} atingiu ${currentMileage.toLocaleString('pt-BR')}km. ${reminder.description}`,
                channel: 'IN_APP',
                category: 'maintenance',
                data: {
                    vehicleId: vehicle.id,
                    reminderId: reminder.id,
                    currentMileage,
                    dueMileage: reminder.dueMileage,
                    description: reminder.description
                }
            });

            // Marcar como notificado
            await prisma.reminder.update({
                where: { id: reminder.id },
                data: { lastNotified: new Date() }
            });

            // Se o lembrete √© recorrente, calcular pr√≥xima quilometragem
            if (reminder.recurring && reminder.intervalMileage) {
                const nextMileage = reminder.dueMileage + reminder.intervalMileage;
                await prisma.reminder.update({
                    where: { id: reminder.id },
                    data: { dueMileage: nextMileage }
                });

                console.log(`üîÑ MileageNotificationService: Pr√≥ximo lembrete agendado para ${nextMileage}km`);
            } else {
                // Marcar como conclu√≠do se n√£o for recorrente
                await prisma.reminder.update({
                    where: { id: reminder.id },
                    data: { completed: true }
                });

                console.log(`‚úÖ MileageNotificationService: Lembrete ${reminder.id} marcado como conclu√≠do`);
            }

        } catch (error) {
            console.error('‚ùå MileageNotificationService: Erro ao disparar notifica√ß√£o:', error);
        }
    }

    /**
     * Cria um novo lembrete baseado em quilometragem
     */
    async createMileageReminder(data: {
        vehicleId: string;
        description: string;
        dueMileage: number;
        intervalMileage?: number;
        recurring?: boolean;
    }): Promise<any> {
        try {
            console.log(`üìù MileageNotificationService: Criando lembrete baseado em quilometragem para ve√≠culo ${data.vehicleId}`);

            const reminder = await prisma.reminder.create({
                data: {
                    vehicleId: data.vehicleId,
                    description: data.description,
                    dueMileage: data.dueMileage,
                    intervalMileage: data.intervalMileage,
                    recurring: data.recurring || false,
                    type: data.recurring ? 'MILEAGE_BASED' : 'MILEAGE_BASED',
                    completed: false
                },
                include: {
                    vehicle: {
                        include: {
                            owner: true
                        }
                    }
                }
            });

            console.log(`‚úÖ MileageNotificationService: Lembrete criado com ID ${reminder.id}`);
            return reminder;

        } catch (error) {
            console.error('‚ùå MileageNotificationService: Erro ao criar lembrete:', error);
            throw error;
        }
    }

    /**
     * Atualiza a quilometragem de um ve√≠culo e verifica lembretes
     */
    async updateVehicleMileage(vehicleId: string, newMileage: number): Promise<void> {
        try {
            console.log(`üîÑ MileageNotificationService: Atualizando quilometragem do ve√≠culo ${vehicleId} para ${newMileage}km`);

            // Atualizar quilometragem do ve√≠culo
            await prisma.vehicle.update({
                where: { id: vehicleId },
                data: { mileage: newMileage }
            });

            // Registrar no hist√≥rico de quilometragem
            await prisma.mileageRecord.create({
                data: {
                    vehicleId,
                    mileage: newMileage,
                    date: new Date(),
                    notes: 'Atualiza√ß√£o manual de quilometragem'
                }
            });

            // Verificar lembretes baseados em quilometragem
            await this.checkMileageBasedReminders(vehicleId, newMileage);

            console.log(`‚úÖ MileageNotificationService: Quilometragem atualizada e lembretes verificados`);

        } catch (error) {
            console.error('‚ùå MileageNotificationService: Erro ao atualizar quilometragem:', error);
            throw error;
        }
    }

    /**
     * Busca todos os lembretes baseados em quilometragem de um ve√≠culo
     */
    async getMileageReminders(vehicleId: string): Promise<any[]> {
        try {
            const reminders = await prisma.reminder.findMany({
                where: {
                    vehicleId,
                    type: {
                        in: ['MILEAGE_BASED', 'HYBRID']
                    }
                },
                orderBy: {
                    dueMileage: 'asc'
                }
            });

            return reminders;
        } catch (error) {
            console.error('‚ùå MileageNotificationService: Erro ao buscar lembretes:', error);
            throw error;
        }
    }

    /**
     * Calcula a pr√≥xima quilometragem para manuten√ß√£o baseada no padr√£o do usu√°rio
     */
    calculateNextMaintenanceMileage(currentMileage: number, intervalKm: number): number {
        // Calcular a pr√≥xima quilometragem baseada no intervalo
        const nextMileage = Math.ceil(currentMileage / intervalKm) * intervalKm;
        return nextMileage;
    }
} 